Release of digsig.1.0
====================== 

This kernel module checks signature of a binary before running it.
The main functionality is to insert digital signatures inside the ELF
binary and verify this signature before loading the binary. It is
based on the LSM hooks.

It has been added to DSI's CVS. In order to simplify its use, it is
available either as part of the DSI package, or in a standalone
version independently of DSI. Some dsi-based source code files are
still in the independant package. However, the module is independent
from DSI and you don't need to download the whole dsi tar ball to play
with the digsig module (even if we'll be more than happy to have your
feedback about dsi project :-)).

Our approach has been to use the existing solutions like gpg and bsign
rather than reinventing the whole thing from scratch.

However, in order to reduce the overhead in the kernel, we took only
the minimum code necessary from GPG. We took only the MPI (Multi
Precision Integer) source code and the RSA crypto source code. This
helped much to reduce the amount of code imported to the kernel in
sourc code of the original (only 1/10 of the original gnupg 1.2.2
sourc code has been imported to the kernel module). On the other hand,
we avoided OpenSSL source code for the fact that the licensing was not
clear to us. We did some tests at user level and found out that
OpenSSL is 4 times faster than GPG regarding RSA verification. As a
future direction, we plan to clarify this licensing issue and use (if
possible) OpenSSL instead of GPG.

COMPILING
=========== 

To compile Digsig from the directory you installed Digsig do: 
[root@digsig]# ./digsig.init compile

You can set different compilation arguments in Makefile: 

-DDSI_DEBUG: This allows to print the debug messages to
/var/log/messages.

-DDSI_DIGSIG_DEBUG: When this variable is set Digsig will run in
debug mode.  In debug mode, DigSig lets unsigned binaries run. This
state is ideal to test DigSig, and also list the binaries you need to
sign to get a fully operational system.

 -DDSI_EXEC_ONLY: DigSig normally verifies the signatures for
 executable binaries and shared librairies. If you wish for
 performance reason or whatever other reason to only verify the
 signatures for executable binaries set this variable.
 
 -DDIGSIG_LOG: This activates the logging. Be careful about the amount
 of log to be generated at run time. 

Requirements:
==============

Linux OS kernel 2.5.66 or higher.

Bsign version
0.4.5. (http://packages.debian.org/unstable/admin/bsign.html)

GPG 1.2.2 or higher.

Performances
=============== 

This is release 0.2. We have done some benchmarks. 

Macro tests: 

We ran lmbench on a Pentium IV, 2.4 GHz, 500 mega bytes of memory,
running Linux 2.5.66. Our benchmarks show that the execution time
(exec function call) multiplies by a factor of 4 when the module is
loaded (no changes for fork call, as the binary is not loaded into
memory).

Micro tests with gnupg: 

We present below the overhead at kernel-level for checking the
signature.

In below, we give the performances for DigSig running with the
variable DSI_EXEC_ONLY set. This means that we only measure the time
for verifying the signature of the executable binary and do not take
into accoubt the time necessary to verify the signatures for the
shared libraries. 

Always on a Pentium IV, 2.4 GHz, 500 mega bytes of memory, running
Linux 2.5.66: 

+-----------+---------+----------+
| Binaries  |   Size  |  GnuPG   |
+-----------+---------+----------+
|        ls |   68230 |  1.61765 |
|        ps |   70337 |  1.67742 |
|   busybox |  248801 |  4.66666 |
|       cvs |  672532 | 11.53571 |
|       vim | 1894305 | 31.25000 |
|     emacs | 4093614 | 67.41176 |
+-----------+---------+----------+

Time is in jiffies -> 1 jiffies = 1ms


Linear regression
time = 1.393899E-5 * size + 0.815081 

A Very simple scenario to show how to use it  
=======================================

1) Generate gpg key and export your public key in order to use it for
 signature verification.
 
$gpg --gen-key 

=> careful generate RSA key 

$gpg --export >> my_public_key.pub 

2) Sign your binaries using Bsign 

Before using bsign to sign all your binaries, try out with a simple
example.

$cp `which ps` ps-test
$bsign -s ps-test // sign the binary 
$bsign -V ps-test // be sure that the signature is valid  

3) Make the digsig module 

From ./digsig, do make -C /usr/src/linux-2.5.66 SUBDIRS=$PWD modules. You need rw acess to /usr/src/linux-2.5.66. 

CAREFULL: we advice you to compile the module in debug mode at your
first tries (see -DDSI_DEBUG -DDSI_DIGSIG_DEBUG in the Makefile). In
this mode, the module verifies the signatures but does not enforce the
security (if not any signature present in your binary, you'll have a
message in /var/log/messages but the execution is not
aborted.). However, the execution of the bianaries with invalid
signatures is aborted. Once, you're sure of your binary signature
procedure you can recompile the whole on non-debug mode.

4) load digsig, use the public key exported in step 1 as argument 

Be sure that sysfs is mounted in /sys or the key won't be loaded.
You can mount sysfs with this command :
mount -t sysfs sysfs /sys


root@colby digsig-dev]# ./digsig.init start pubkey.pub
Loading Digsig module.
Making device for communication with the module.
Loading public key.
Done.


5) In debug mode: 

$ps 
$./ps-test 

$tail -f /var/log/messages 
Sep 16 15:49:13 colby kernel: DSI-LSM MODULE - binary is /bin/ps
Sep 16 15:49:16 colby kernel: DSI-LSM MODULE - binary is ./ps-makan
Sep 16 15:49:16 colby kernel: DSI-LSM MODULE - dsi_bprm_compute_creds: Found signature section
Sep 16 15:49:16 colby kernel: DSI-LSM MODULE - dsi_bprm_compute_creds: Signature verification successful

6) In restrictive mode, normal mode 

You need to use bsign to sign all binaries that you want to run in
normal mode. 

// signed binary 
[lmcmpou@reblochon lmcmpou]$ ps
  PID TTY          TIME CMD
 6897 pts/2    00:00:00 bash
 6941 pts/2    00:00:00 ps

// not signed binary 
[lmcmpou@reblochon lmcmpou]$ ./ps-makan-1
bash: ./ps-makan: cannot execute binary file

// binary with wrong signature 
[lmcmpou@reblochon lmcmpou]$ ./ps-makan-2 
bash: ./ps-makan-colby: Operation not permitted

7) Unload the module. 

[root@colby digsig-dev]# ./digsig.init stop
Unloading Digsig.

Acknowledgements
================= 

This work has been done by (alphabetical order) 

A Apvrille (axelle.apvrille@ericsson.ca),
D Gordon (davidgordonca@yahoo.ca),  
M Pourzandi (makan.pourzandi@ericsson.ca),
V Roy (vincent.roy@ericsson.ca).

Thanks to Radu Filip who has done the initial analysis. 

Thanks to Marc Springer who helped us with the use of Bsign. 

